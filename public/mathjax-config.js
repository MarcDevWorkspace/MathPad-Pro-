// public/mathjax-config.js

// Make sure MathJax is globally available or handle its loading if using async script loading carefully.
// This config assumes MathJax will be loaded by the time this script is executed,
// or that MathJax itself will pick up this global configuration object.

window.MathJax = {
  tex: {
    inlineMath: [['$', '$'], ['\\(', '\\)']],
    displayMath: [['$$', '$$'], ['\\[', '\\]']],
    processEscapes: true,
    tags: 'ams,ुट, // Use AMS numbering, "none" to disable, or "all"
    // Common TeX packages to load. AMS provides many math environments.
    // 'base' is always loaded.
    packages: {'[+]': ['ams', 'boldsymbol', 'newcommand', 'noerrors']},
    // `noerrors` extension prevents MathJax from halting on TeX errors,
    // instead displaying the original TeX with an error message. Useful for a live editor.

    // Macros can be defined here if they are static and globally needed.
    // macros: {
    //   R: '\\mathbb{R}',
    //   C: '\\mathbb{C}'
    // },

    // For advanced TeX input processing, one might look into custom TeX extensions
    // or modifying the TeX input jax's behavior, but this is highly complex.
  },
  mml: {
    // MathML input options (if we were directly inputting MML)
    // There isn't a direct pre-filter here for attributes in the standard config.
    // Such modifications would typically happen by processing the MML tree generated by tex2mml.
  },
  chtml: {
    fontURL: 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/output/chtml/fonts/woff-v2', // Recommended
    mtextInheritFont: true, // Ensures <mtext> (often from \text) inherits surrounding font
    // displayAlign: 'center', // Default
    // displayIndent: '0',     // Default
    // adaptiveCSS: true,      // Let MathJax adapt to some surrounding CSS
  },
  svg: {
    fontCache: 'global',        // 'global', 'local', or 'none'
    mtextInheritFont: true,
    // internalSpeechTitles: true, // Adds <title> for speech, default is true
  },
  options: {
    skipHtmlTags: [ // Tags MathJax will not process input within
        'script', 'noscript', 'style', 'textarea', 'pre', 
        'code', 'annotation', 'annotation-xml'
    ],
    ignoreHtmlClass: 'tex2jax_ignore',    // Class to mark elements to ignore
    processHtmlClass: 'tex2jax_process',  // Class to mark elements to process (if typesetOnLoad is used)
    enableMenu: false,          // Disable MathJax context menu for a cleaner app-like UI
    
    // renderActions are advanced hooks into the rendering pipeline.
    // This is where one *might* be able to tap in to modify the internal MML
    // or output before it's finalized, but it requires understanding MathJax's internal types.
    // renderActions: {
    //   add அவர்IDs: [
    //     150, // Priority
    //     (doc) => { /* Logic to traverse doc.root (MmlNode) and add IDs */ },
    //     (math, doc) => { /* Potentially post-conversion modification */ }
    //   ]
    // },

    // For our strategy of: TeX -> MML string -> Modify MML string -> MML to Output
    // The key is that MathJax.tex2mml() and MathJax.mml2chtml()/mml2svg() are available.
  },
  loader: {
    load: ['[tex]/ams', '[tex]/newcommand', '[tex]/noerrors', '[tex]/boldsymbol'] // Ensure packages are loaded
  },
  startup: {
    // typesetOnLoad: false, // We explicitly call typesetPromise or manage rendering.
    // We could use pageReady to let MathJax find and typeset initial static math elements
    // if we had any, but our editor content is dynamic.
    // pageReady: () => {
    //   return MathJax.startup.defaultPageReady();
    // },
    ready: () => {
      console.log('MathJax (from mathjax-config.js) is ready and configured.');
      MathJax.startup.defaultReady(); // Completes MathJax internal startup

      // Dispatch a custom event indicating MathJax is fully initialized and configured
      // This allows MathEditor.ts to wait for this event before trying to use MathJax.
      document.dispatchEvent(new CustomEvent('mathjax-ready', { detail: MathJax }));
    }
  }
};